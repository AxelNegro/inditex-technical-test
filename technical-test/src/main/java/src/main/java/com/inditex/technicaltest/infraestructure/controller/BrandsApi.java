/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.7.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.inditex.technicaltest.infraestructure.controller;

import java.math.BigDecimal;
import org.springframework.format.annotation.DateTimeFormat;
import java.time.LocalDateTime;
import com.inditex.technicaltest.infraestructure.controller.dto.MessageDto;
import com.inditex.technicaltest.infraestructure.controller.dto.PriceDto;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-08-01T13:18:46.921392800+02:00[Europe/Madrid]", comments = "Generator version: 7.7.0")
@Tag(name = "Prices", description = "Tag used for the prices-related endpoints.")
public interface BrandsApi {

    /**
     * GET /brands/{brand_id}/products/{product_id}/prices : Get product price of the brand by date
     * Endpoint in charge of getting the product price of the brand by date.
     *
     * @param applicationDate Date of application to get the price of the product for that date. (required)
     * @param brandId Id of the brand. (required)
     * @param productId Id of the product. (required)
     * @return Price for the GET - /brands/{brand_id}/products/{product_id}/prices endpoint. (status code 200)
     *         or Response used for the 400 responses in GET - /brands/{brand_id}/products/{product_id}/prices endpoint. (status code 400)
     *         or Response used for the 500 responses in GET - /brands/{brand_id}/products/{product_id}/prices endpoint. (status code 500)
     */
    @Operation(
        operationId = "getBrandsBrandIdProductsProductIdPrices",
        summary = "Get product price of the brand by date",
        description = "Endpoint in charge of getting the product price of the brand by date.",
        tags = { "Prices" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Price for the GET - /brands/{brand_id}/products/{product_id}/prices endpoint.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PriceDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Response used for the 400 responses in GET - /brands/{brand_id}/products/{product_id}/prices endpoint.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MessageDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "Response used for the 500 responses in GET - /brands/{brand_id}/products/{product_id}/prices endpoint.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MessageDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/brands/{brand_id}/products/{product_id}/prices",
        produces = { "application/json" }
    )
    
    ResponseEntity<PriceDto> getBrandsBrandIdProductsProductIdPrices(
        @Parameter(name = "application_date", description = "Date of application to get the price of the product for that date.", required = true, in = ParameterIn.QUERY) @RequestParam(value = "application_date", required = true) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) LocalDateTime applicationDate,
        @Parameter(name = "brand_id", description = "Id of the brand.", required = true, in = ParameterIn.PATH) @PathVariable("brand_id") BigDecimal brandId,
        @Parameter(name = "product_id", description = "Id of the product.", required = true, in = ParameterIn.PATH) @PathVariable("product_id") BigDecimal productId
    );

}
